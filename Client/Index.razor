@namespace Oqtane.ChatHubs

@inherits IndexBase

@inject NavigationManager NavigationManager
@inject HttpClient http
@inject SiteState sitestate
@inject ISettingService SettingService

@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.Generic
@using System.Linq
@using Oqtane.ChatHubs
@using Oqtane.Client
@using Oqtane.Shared.Enums
@using Oqtane.Modules
@using Oqtane.Shared.Models
@using BlazorStrap
@using BlazorTable

<style type="text/css">

    .light-yellow-container {
        background-color: #ffffdd;
        border: 1px solid #dddddd;
    }

    .visibility-collapse {
        visibility: collapse;
    }

    .chat-hub-photo-mat-card {
        color: #1a1a1a !important;
        background-color: white !important;
        max-width: 400px;
        border-radius: 0px !important;
        box-shadow: none !important;
    }

    .chat-hub-photo-mat-card-content {
        padding: 1rem;
    }

    .chat-hub-photo-mat-card-clean-margin {
        margin: 0px;
    }
</style>

<br />

<div class="p-sm-3 light-yellow-container" style="height:900px; overflow: auto;">

    @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
    {
        <div class="form-group">
            <button type="button" class="btn btn-sm btn-link bg-white border border-light" @onclick="@(async() => await FixCorruptConnections_ClickedAsync())">Clear all active user connections.</button>
        </div>
    }

    @if (ChatHubService.Connection == null || ChatHubService.Connection?.State == HubConnectionState.Disconnected)
    {

        <div class="form-group">
            <label for="guestUsernameInput-@ModuleState.ModuleId.ToString()">Choose your desired username:</label>
            <input type="text" id="guestUsernameInput-@ModuleState.ModuleId.ToString()" class="form-control" @bind-value="@GuestUsername" placeholder="Gastname" />
        </div>

        <div class="form-group">
            <button type="button" class="btn btn-sm btn-link bg-white border border-light" @onclick="@(async () => await ConnectAsGuest())">Connect to chat</button>
        </div>

    }
    else if (ChatHubService.Connection?.State == HubConnectionState.Connected)
    {
        <pre class="bg-white">
            Connected as @ChatHubService.ConnectedUser?.DisplayName        
        </pre>
    }


    @if (ChatHubService.Lobbies != null)
    {
        if (PageState.QueryString.ContainsKey("moduleid") && PageState.QueryString.ContainsKey("roomid") && int.Parse(PageState.QueryString["moduleid"]) == ModuleState.ModuleId)
        {
            if (ChatHubService.Lobbies?.Count > 0)
            {
                <div>

                    <h2>@contextRoom?.Title</h2>
                    <p>
                        @((MarkupString)@contextRoom?.Content)
                        <br /><br /><b>Posted by</b> @contextRoom?.CreatedBy <b>on</b> @contextRoom?.CreatedOn.ToShortDateString()
                    </p>

                    <NavLink class="btn btn-secondary" href="@NavigateUrl()">View All Rooms</NavLink>

                </div>
            }
        }
        else
        {

            <BSTabGroup ShowEvent="@Show" HiddenEvent="@Hidden" HideEvent="@Hide" ShownEvent="@Shown">
                <BSTabList>
                    <BSTab>
                        <BSTabLabel><button class="btn btn-link">Lobby</button></BSTabLabel>
                        <BSTabContent>

                            <section class="d-flex flex-wrap flex-lg-nowrap align-content-lg-start p-sm-3 bg-white">
                                <div class="flex-fill" style="max-width: 1200px; height: @MessageWindowHeight; overflow: auto;">

                                    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add Room" />

                                    <Table TableItem="ChatHubRoom" Items="@ChatHubService.Lobbies" PageSize="4" TableClass="table table-sm table-light" TableHeadClass="visibility-collapse" ShowSearchBar="false">

                                        <Column TableItem="ChatHubRoom" Title="Image" Field="@(x => x.ImageUrl)" Sortable="false" Filterable="false" Class="align-middle" Width="20%">
                                            <Template>

                                                <MatCard class="chat-hub-photo-mat-card">
                                                    <MatCardContent>
                                                        <MatCardMedia Wide="true" ImageUrl="@string.Format("{0}/modules/oqtane.chathubs/chathub/images/rooms/{1}", NavigationManager.BaseUri, context.ImageUrl)" class="@(string.IsNullOrEmpty(context.ImageUrl) ? "d-none" : "img-fuid bg-light")"></MatCardMedia>
                                                        <MatCardMedia Wide="true" ImageUrl="@string.Format("{0}/modules/oqtane.chathubs/chathub/images/chat-room-image.png", NavigationManager.BaseUri, context.ImageUrl)" class="@(string.IsNullOrEmpty(context.ImageUrl) ? "img-fluid bg-light" : "d-none")"></MatCardMedia>
                                                    </MatCardContent>
                                                </MatCard>
                                                
                                            </Template>
                                        </Column>

                                        <Column TableItem="ChatHubRoom" Title="Content" Field="@(x => x.Content)" Sortable="false" Filterable="false">
                                            <Template>
                                                <div class="px-1 py-2">
                                                    <a href="@NavigateUrl(PageState.Page.Path, "moduleid=" + context.ModuleId.ToString() + "&" + "roomid=" + context.ChatHubRoomId.ToString())">
                                                        <h6>@context.Title</h6>
                                                    </a>
                                                    <p class="text-muted">
                                                        <span>@context.Content</span>
                                                        &nbsp;(<b>Posted by</b> @context.CreatedBy <b>on</b> @context.CreatedOn.ToShortDateString())
                                                        <br />
                                                        Online Users: @context.Users.Count()
                                                    </p>
                                                    <div class="form-group">
                                                        <button type="button" class="btn btn-sm btn-link bg-light border-0" @onclick="@(async () => await EnterRoom_Clicked(context.ChatHubRoomId, context.ModuleId))">Enter Room</button>
                                                    </div>
                                                </div>
                                            </Template>
                                        </Column>

                                        <Column TableItem="ChatHubRoom" Title="Edit" Sortable="false" Filterable="false" Class="@(UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions) && PageState.EditMode ? "d-table-cell" : "d-none")">
                                            <Template>
                                                <ActionLink Action="Edit" Security="SecurityAccessLevel.Edit" Parameters="@($"moduleid=" + context.ModuleId.ToString() + "&" + "roomid=" + context.ChatHubRoomId.ToString())" />
                                            </Template>
                                        </Column>

                                        <Column TableItem="ChatHubRoom" Title="Delete" Sortable="false" Filterable="false" Class="@(UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions) && PageState.EditMode ? "d-table-cell" : "d-none")">
                                            <Template>
                                                <ActionDialog Header="Delete Room" Message="@("Are You Sure You Wish To Delete This Room?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await DeleteRoom(context.ChatHubRoomId))" />
                                            </Template>
                                        </Column>

                                        <BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" />

                                    </Table>

                                </div>
                            </section>

                        </BSTabContent>
                    </BSTab>


                    @foreach (var room in ChatHubService.Rooms)
                    {

                        <BSTab @key="room" Id="@room.ChatHubRoomId.ToString()">
                            <BSTabLabel>

                                @room.Title&nbsp;
                                <BSBadge Color="Color.Warning" Class="@(room.UnreadMessages != 0 ? "" : "d-none")">@room.UnreadMessages</BSBadge>
                                <MatIcon Icon="@MatIconNames.Close" @onclick="async () => await LeaveRoom_Clicked(room.ChatHubRoomId, ModuleState.ModuleId)"></MatIcon>

                            </BSTabLabel>
                            <BSTabContent>

                                <div class="d-flex">
                                    <div class="flex-fill flex-grow-1 @(room.ShowUserlist ? "d-none" : "d-flex")">
                                        <div class="w-100 bg-white p-sm-3">

                                            <div id="message-window-@ModuleState.ModuleId-@room.ChatHubRoomId" style="height: @MessageWindowHeight; overflow: auto;">

                                                <h3>@room.Content</h3>

                                                <br />

                                                <Message Messages="@room.Messages" Context="item">
                                                    <SystemTemplate>
                                                        <div>
                                                            @item.ChatHubMessageId
                                                        </div>
                                                    </SystemTemplate>
                                                    <AdminTemplate>
                                                        <div>
                                                            <span class="text-muted">
                                                                @string.Format("[{0}]", item.CreatedOn.ToLocalTime().ToString(ChatWindowDatePattern))
                                                            </span>
                                                            <span>
                                                                <strong>@item.User.DisplayName:</strong>
                                                            </span>
                                                            <span>
                                                                @((MarkupString)HighlightOwnUsername(ReplaceYoutubeLinksAsync(item.Content), ChatHubService.ConnectedUser.DisplayName))
                                                            </span>
                                                        </div>
                                                    </AdminTemplate>
                                                    <UserTemplate>
                                                        <div>
                                                            <span class="text-muted">
                                                                @string.Format("[{0}]", item.CreatedOn.ToLocalTime().ToString(ChatWindowDatePattern))
                                                            </span>
                                                            <span>
                                                                <strong>@item.User.DisplayName:</strong>
                                                            </span>
                                                            <span>
                                                                @(HighlightOwnUsername(ReplaceYoutubeLinksAsync(item.Content), ChatHubService.ConnectedUser.DisplayName))
                                                            </span>
                                                        </div>
                                                    </UserTemplate>
                                                    <GuestTemplate>
                                                        <div>
                                                            <span class="text-muted">
                                                                @string.Format("[{0}]", item.CreatedOn.ToLocalTime().ToString(ChatWindowDatePattern))
                                                            </span>
                                                            <span>
                                                                <strong>@item.User.DisplayName:</strong>
                                                            </span>
                                                            <span>
                                                                @(HighlightOwnUsername(ReplaceYoutubeLinksAsync(item.Content), ChatHubService.ConnectedUser.DisplayName))
                                                            </span>
                                                        </div>
                                                    </GuestTemplate>
                                                    <WhisperTemplate>
                                                        <div>
                                                            @item.ChatHubMessageId
                                                        </div>
                                                    </WhisperTemplate>
                                                    <MeTemplate>
                                                        <div>
                                                            @item.ChatHubMessageId
                                                        </div>
                                                    </MeTemplate>
                                                    <EnterLeaveTemplate>
                                                        <div>
                                                            @item.ChatHubMessageId
                                                        </div>
                                                    </EnterLeaveTemplate>
                                                    <ConnectDisconnectTemplate>
                                                        <div>
                                                            @item.ChatHubMessageId
                                                        </div>
                                                    </ConnectDisconnectTemplate>
                                                    <ImageTemplate>
                                                        @if (item.Photos != null)
                                                        {

                                                            <div>
                                                                <button type="button" class="btn btn-link" @onclick="() => OpenDialog(item)">

                                                                    Open Image(s)

                                                                    @if (item.Photos != null)
                                                                    {
                                                                        @foreach (var photo in item.Photos)
                                                                        {
                                                                            <span>@photo.Caption</span>

                                                                            @if (!photo.Equals(item.Photos.Last()))
                                                                            {
                                                                                <strong> | </strong>
                                                                            }
                                                                        }
                                                                    }
                                                                </button>
                                                            </div>

                                                        }
                                                    </ImageTemplate>
                                                </Message>

                                            </div>

                                            <div class="bg-white px-1 py-2" style="height: 50px;">

                                                <div class="input-group">

                                                    <input type="text" class="form-control" @bind-value="@room.MessageInput" @onkeyup="(e) => KeyDown(e, room)" placeholder="Tippe deinen Text ein.." />

                                                    <div class="input-group-append">
                                                        <button type="button" class="btn btn-primary input-group-button mr-0 mr-sm-4" @onclick="() => SendMessage_Clicked(room.MessageInput, room)"><span class="oi oi-envelope-open"></span></button>
                                                        <button type="button" class="btn btn-info input-group-button d-none d-sm-inline-block" @onclick="() => ChatHubService.ClearHistory(room.ChatHubRoomId)"><span class="oi oi-trash"></span></button>
                                                        <button type="button" class="btn btn-dark input-group-button d-inline-block d-xl-none" @onclick="() => ChatHubService.ToggleUserlist(room)"><span class="oi oi-list"></span></button>
                                                        <button type="button" class="btn btn-danger input-group-button d-none d-sm-inline-block" @onclick="async () => await ChatHubService.DisconnectAsync()"><span class="oi oi-power-standby"></span></button>
                                                    </div>

                                                </div>

                                            </div>

                                        </div>
                                    </div>

                                    <div class="userlist bg-light p-0 pl-xl-3 w-100 d-none d-xl-flex @(room.ShowUserlist ? "flex-fill d-flex" : "")" style="max-width: 280px;">
                                        <div class="w-100 my-3" style="height: @UserlistWindowHeight; overflow: auto;">

                                            <button type="button" class="btn btn-light input-group-button @(room.ShowUserlist ? "d-block" : "d-none")" @onclick="() => ChatHubService.ToggleUserlist(room)" style="position: relative; float: right;"><span class="oi oi-x"></span></button>

                                            <MatTabGroup>

                                                <MatTab>

                                                    <LabelContent>
                                                        <div><span class="oi oi-people"></span> (@room.Users.Count())</div>
                                                    </LabelContent>

                                                    <ChildContent>

                                                        <div class="px-sm-0">

                                                            <div class="accordion">
                                                                @foreach (ChatHubUser user in room.Users)
                                                                {
                                                                    @if (user.UserId == ChatHubService.ConnectedUser.UserId)
                                                                    {
                                                                        <BSCard CardType="CardType.Card" @key="user">
                                                                            <BSCard CardType="CardType.Header">
                                                                                <BSButton ButtonType="ButtonType.Button" OnClick="(e) => UserlistItem_Clicked(e, room, user)" Color="Color.None" Class="btn-link">
                                                                                    <strong class="align-middle" style="height: 16px;">@user.DisplayName</strong>
                                                                                </BSButton>
                                                                            </BSCard>
                                                                            <BSCollapse IsOpen="@user.UserlistItemCollapsed">
                                                                                <BSCard CardType="CardType.Text">
                                                                                    <button type="button" class="btn btn-sm btn-link" @onclick="() => OpenProfile_Clicked(user.UserId, room.ChatHubRoomId)">Profil/Einstellungen</button>
                                                                                </BSCard>
                                                                            </BSCollapse>
                                                                        </BSCard>
                                                                    }
                                                                    else
                                                                    {
                                                                        <BSCard CardType="CardType.Card" @key="user">
                                                                            <BSCard CardType="CardType.Header">
                                                                                <BSButton ButtonType="ButtonType.Button" OnClick="(e) => UserlistItem_Clicked(e, room, user)" Color="Color.None" Class="btn-link">
                                                                                    <span class="align-middle" style="height: 16px;">@user.DisplayName</span>
                                                                                </BSButton>
                                                                            </BSCard>
                                                                            <BSCollapse IsOpen="@user.UserlistItemCollapsed">
                                                                                @*
                                                                                    <BSCard CardType="CardType.Text">
                                                                                        <button type="button" class="btn btn-sm btn-link" @onclick="() => OpenProfile_Clicked(user.UserId, room.ChatHubRoomId)">Profil öffnen</button>
                                                                                    </BSCard>
                                                                                *@
                                                                                <BSCard CardType="CardType.Text">
                                                                                    <button type="button" class="btn btn-sm btn-link" @onclick="() => ChatHubService.IgnoreUser_Clicked(user.UserId, room.ChatHubRoomId, user.Username)">Benutzer Ignorieren</button>
                                                                                </BSCard>
                                                                            </BSCollapse>
                                                                        </BSCard>
                                                                    }
                                                                }
                                                            </div>

                                                        </div>

                                                    </ChildContent>

                                                </MatTab>

                                                <MatTab>

                                                    <LabelContent><span class="oi oi-image"></span></LabelContent>

                                                    <ChildContent>

                                                        <div class="px-sm-1 py-3">

                                                            <h5>Teile deine Bilder <span class="badge badge-success">NEW</span></h5>
                                                            <FileReader ModuleId="@ModuleState.ModuleId.ToString()" ChatHubRoomId="@room.ChatHubRoomId.ToString()" ChatHubService="ChatHubService"></FileReader>

                                                        </div>

                                                    </ChildContent>

                                                </MatTab>

                                            </MatTabGroup>

                                        </div>
                                    </div>

                                </div>

                            </BSTabContent>
                        </BSTab>

                    }

                </BSTabList>
                <BSTabSelectedContent />
            </BSTabGroup>

        }
        <br />
    }

    <div class="w-100">

        <p class="float-right"><small>Project Url: <a href="https://github.com/boredanyway/oqtane.chathubs" target="_blank" title="oqtane chathub module dev">https://github.com/boredanyway/oqtane.chathubs</a></small></p>

    </div>

</div>


<BSModal @ref="CenteredBSModal" IsCentered="true">
    <BSModalHeader OnClick="@BSModalOnToggle">Profil/Einstellungen</BSModalHeader>
    <BSModalBody>

        <BSTabGroup>
            <BSTabList>

                <BSTab>
                    <BSTabLabel>Profile Info</BSTabLabel>
                    <BSTabContent>

                        <div class="p-sm-3">
                            Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.
                        </div>

                    </BSTabContent>
                </BSTab>

                <BSTab>
                    <BSTabLabel><div><span class="oi oi-shield"></span> (@ChatHubService.IgnoredUsers?.Count())</div></BSTabLabel>
                    <BSTabContent>

                        <div class="p-sm-3">

                            <h5>Ignoliste</h5>

                            @if (ChatHubService.IgnoredUsers == null || !ChatHubService.IgnoredUsers.Any())
                            {
                                <div class="alert alert-info"><small>Noch Niemanden gefunden bislang..</small></div>
                            }
                            else
                            {
                                <table class="table table-sm">
                                    <tbody>
                                        @foreach (var ignoredUser in ChatHubService.IgnoredUsers)
                                        {

                                            <tr>
                                                <td>@ignoredUser.DisplayName</td>
                                                <td>
                                                    <button type="button" class="btn btn-sm btn-link" @onclick="() => ChatHubService.UnignoreUser_Clicked(ignoredUser.Username)">
                                                        <span class="oi oi-x"></span>
                                                    </button>
                                                </td>
                                            </tr>

                                        }
                                    </tbody>
                                </table>
                            }

                        </div>

                    </BSTabContent>
                </BSTab>

                <BSTab>
                    <BSTabLabel><div><span class="oi oi-bug"></span> (@ChatHubService.IgnoredByUsers?.Count())</div></BSTabLabel>
                    <BSTabContent>

                        <div class="p-sm-3">

                            <h5>Ignoriert von Liste</h5>

                            @if (ChatHubService.IgnoredByUsers == null || !ChatHubService.IgnoredByUsers.Any())
                            {
                                <div class="alert alert-info"><small>Noch Niemanden gefunden bislang..</small></div>
                            }
                            else
                            {
                                @foreach (var ignoredByUser in ChatHubService.IgnoredByUsers)
                                {
                                    <div>@ignoredByUser.DisplayName</div>
                                }
                            }

                        </div>

                    </BSTabContent>
                </BSTab>
            </BSTabList>
            <BSTabSelectedContent />

        </BSTabGroup>
    </BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Link" @onclick="@BSModalOnToggle">Close</BSButton>
    </BSModalFooter>
</BSModal>

<MatDialog @bind-IsOpen="@dialogIsOpen">

    @if (messageItem != null && messageItem.Photos != null)
    {
        <MatDialogTitle>
            <b>Posted by</b> @messageItem.User?.DisplayName <b>on</b> @messageItem.CreatedOn.ToShortTimeString()
        </MatDialogTitle>
        <MatDialogContent>

            <div>

                @foreach (var photo in messageItem.Photos)
                {
                    <MatCard class="chat-hub-photo-mat-card">
                        <MatCardContent>
                            <MatCardMedia Wide="true" ImageUrl="@string.Format("{0}/modules/oqtane.chathubs/chathub/images/selfies/{1}", NavigationManager.BaseUri, photo.Source)" Style="@string.Format("height: {0}px", photo.Height.ToString())"></MatCardMedia>
                            <div class="chat-hub-photo-mat-card-content">
                                <MatHeadline6 class="chat-hub-photo-mat-card-clean-margin">
                                    Posted by @photo.Caption
                                </MatHeadline6>
                                <MatSubtitle2 class="chat-hub-photo-mat-card-clean-margin">
                                    <button type="button" class="btn btn-sm btn-link">Click here to report no suitable content respectively inappropriate images..</button>
                                </MatSubtitle2>
                            </div>
                            <MatBody2 class="chat-hub-photo-mat-card-content chat-hub-photo-mat-card-clean-margin">
                            </MatBody2>
                        </MatCardContent>
                    </MatCard>
                }

            </div>

        </MatDialogContent>
    }

    <MatDialogActions>
        <button type="button" class="btn btn-link" @onclick="() => CloseDialogClicked()">Dialog schließen</button>
    </MatDialogActions>
</MatDialog>


@code {

}
